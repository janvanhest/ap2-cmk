@startuml

class FriendRequest {
    - Id: Int
    - Sender: User
    - Recipient: User
    - Status: FriendRequestStatus
    +FriendRequest(sender: User, recipient: User)
    +UpdateStatus(status: FriendRequestStatus)
}

class LearningActivity {
    - Id: Int
    - Name: String
    - Description: String
    - Type: LearningActivityType
    - LearningModuleId: Int
    +LearningActivity(name: String, description: String, type: LearningActivityType, learningModuleId: Int)
    +UpdateActivity(name: String, description: String, type: LearningActivityType)
}

class LearningModule {
    - Id: Int
    - Name: String
    - Description: String
    +LearningModule(name: String, description: String)
    +AddLearningActivity(activity: LearningActivity)
    +RemoveLearningActivity(activity: LearningActivity)
    +ShowLearningActivities(): List<LearningActivity>
    +UpdateModule(name: String, description: String)
}

class Progress {
    - Id: Int
    - Type: ProgressType
    - Status: ProgressStatus
    - ProgressDetails: String
    +Progress(type: ProgressType, status: ProgressStatus, progressDetails: String)
    +ShowDetails(): String
    +UpdateProgress(details: String)
}

class Reward {
    - Id: Int
    - Name: String
    - Type: RewardType
    - Description: String
    - Date: Date
    +Reward(name: String, type: RewardType, description: String, date: Date)
    +ShowDetails(): String
}

class User {
    - Id: Int
    - FirstName: String
    - MiddleName: String
    - LastName: String
    - DateOfBirth: Date
    - Email: String
    - Password: String
    - Role: UserRole
    +User(firstName: String, middleName: String, lastName: String, dateOfBirth: Date, email: String, password: String, role: UserRole)
    +UpdateProfile(firstName: String, middleName: String, lastName: String, email: String, password: String)
    +SetRole(role: UserRole)
    +AddLearningStreak(learningStreak: LearningStreak)
    +AddReward(reward: Reward)
    +AddProgressRecord(progress: Progress)
    +AddSentFriendRequest(friendRequest: FriendRequest)
    +AddReceivedFriendRequest(friendRequest: FriendRequest)
}

class LearningStreak {
    - _scoringStrategy: ILearningStreakScoringStrategy
    - _strategy: ILearningStreakStrategy
    - _dates: List<DateTime>
    - _startDate: DateTime?
    - _endDate: DateTime?
    +LearningStreak(scoringStrategy: ILearningStreakScoringStrategy, strategy: ILearningStreakStrategy)
    +LearningStreak(activityDates: List<DateTime>, scoringStrategy: ILearningStreakScoringStrategy, strategy: ILearningStreakStrategy)
    +AddActivityDate(date: DateTime): bool
    +UpdateDateRange()
    +MeetCriteria(): bool
    +GetCurrentStreak(): Int
    +CalculateTotalScore(): Int
}

class RewardService {
    + AddReward(reward: Reward): Reward
    + GetRewardById(rewardId: Int): Reward
    + GetRewardsByUserId(userId: Int): List<Reward>
}

class FriendRequestService {
    + AddFriendRequest(friendRequest: FriendRequest): FriendRequest
    + UpdateFriendRequestStatus(friendRequestId: Int, status: FriendRequestStatus)
    + GetFriendRequestById(friendRequestId: Int): FriendRequest
    + GetFriendRequestsByUserId(userId: Int): List<FriendRequest>
    + DeleteFriendRequestById(friendRequestId: Int)
}

class ProgressService {
    + AddProgress(progress: Progress): Progress
    + UpdateProgress(progress: Progress): Progress
    + GetAllProgress(): List<Progress>
    + GetProgressByUserId(userId: Int): List<Progress>
    + GetUniqueDatesByUserId(userId: Int): List<DateTime>
}

class LearningActivityService {
    + AddLearningActivity(activity: LearningActivity): LearningActivity
    + UpdateLearningActivity(activity: LearningActivity)
    + GetLearningActivityById(activityId: Int): LearningActivity
    + GetAllLearningActivities(): List<LearningActivity>
    + DeleteLearningActivity(activityId: Int)
}

class UserService {
    + AddUser(user: User): User
    + UpdateUserProfile(user: User)
    + GetUserById(userId: Int): User
    + GetAllUsers(): List<User>
    + DeleteUser(userId: Int)
}

class LearningStreakService {
    + StartStreak(user: User)
    + EndStreak(user: User)
    + GetStreak(user: User): Int
    + CalculateTotalScore(user: User): Int
}

class LearningModuleService {
    + AddLearningModule(module: LearningModule): LearningModule
    + RemoveLearningModule(moduleId: Int)
    + GetLearningModuleById(moduleId: Int): LearningModule
    + GetAllLearningModules(): List<LearningModule>
    + UpdateLearningModule(module: LearningModule)
}

class AuthenticationService {
    - userRepository: IUserRepository
    - currentUser: User
    + RegisterUser(email: String, password: String): User
    + AuthenticateUser(email: String, password: String): User
    + LogoutUser()
    + ChangeUserPassword(user: User, newPassword: String)
}

interface IUserRepository {
    + User AddUser(User user)
    + User GetUserById(int userId)
    + List<User> GetAllUsers()
    + void UpdateUser(User user)
    + void DeleteUser(int userId)
}

interface ILearningActivityRepository {
    + LearningActivity AddLearningActivity(LearningActivity activity)
    + LearningActivity GetLearningActivityById(int activityId)
    + List<LearningActivity> GetAllLearningActivities()
    + void UpdateLearningActivity(LearningActivity activity)
    + void DeleteLearningActivity(int activityId)
}

interface ILearningModuleRepository {
    + LearningModule AddLearningModule(LearningModule module)
    + LearningModule GetLearningModuleById(int moduleId)
    + List<LearningModule> GetAllLearningModules()
    + void UpdateLearningModule(LearningModule module)
    + void DeleteLearningModule(int moduleId)
}

interface IProgressRepository {
    + Progress AddProgress(Progress progress)
    + Progress UpdateProgress(Progress updateProgress)
    + List<Progress> GetAllProgress()
    + List<Progress> GetProgressByUserId(int userId)
    + List<DateTime> GetUniqueDatesByUserId(int userId)
}

interface IFriendRequestRepository {
    + FriendRequest AddFriendRequest(FriendRequest request)
    + void UpdateFriendRequestStatus(int friendRequestId, FriendRequestStatus status)
    + FriendRequest GetFriendRequestById(int requestId)
    + List<FriendRequest> GetFriendRequestsByUserId(int userId)
    + void DeleteFriendRequestById(int friendRequestId)
}

interface IRewardRepository {
    + Reward AddReward(Reward reward)
    + Reward GetRewardById(int rewardId)
    + List<Reward> GetRewardsByUserId(int userId)
}

interface ILearningStreakScoringStrategy {
    + int CalculateScore(List<DateTime> dates)
}

interface ILearningStreakStrategy {
    + bool MeetCriteria(List<DateTime> dates)
}

class WeekendSkipStrategy {
    + int CalculateScore(List{DateTime} dates)
}

class ConsecutiveDaysStrategy {
    + int CalculateScore(List{DateTime} dates)
}

class SimpleScoringStrategy {
    + int CalculateScore(List{DateTime} dates)
}

class BonusScoringStrategy {
    + int CalculateScore(List{DateTime} dates)
}

User -up-> "n" Reward
User -right-> "n" Progress
User "1" -left-> "n" LearningStreak
User "1" -up-> "n" FriendRequest : sent
User "1" <-up- "n" FriendRequest : received

Progress "1" --> "1" LearningActivity
LearningModule "1" --> "n" LearningActivity

LearningModuleService ..> LearningModule : depends on
LearningActivityService .up.> LearningActivity : depends on
ProgressService .up.> Progress : depends on
RewardService .down.> Reward : depends on
UserService .down.> User : depends on
FriendRequestService .right.> FriendRequest : depends on
AuthenticationService ..> User : depends on
LearningStreakService .up.> User : depends on
LearningStreakService .up.> LearningStreak : depends on

AuthenticationService .up.> IUserRepository
LearningActivityService .left.> ILearningActivityRepository
LearningModuleService .up.> ILearningModuleRepository
ProgressService .left.> IProgressRepository
UserService .up.> IUserRepository
FriendRequestService .up.> IFriendRequestRepository
RewardService .right.> IRewardRepository
LearningStreakService .right.> IProgressRepository

LearningStreakService -down-|> ILearningStreakScoringStrategy
LearningStreakService -down-|> ILearningStreakStrategy
WeekendSkipStrategy -up.|> ILearningStreakStrategy
ConsecutiveDaysStrategy -up.|> ILearningStreakStrategy
SimpleScoringStrategy -up.|> ILearningStreakScoringStrategy
BonusScoringStrategy -up.|> ILearningStreakScoringStrategy

@enduml
