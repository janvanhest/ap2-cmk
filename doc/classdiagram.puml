@startuml

enum UserRole {
    TEACHER
    STUDENT
}

enum LearningActivityType {
    MULTIPLECHOICE
    FILLINTHEBLANK
    INSTRUCTION
    QUIZ
}

enum FriendRequestStatus {
    ACCEPTED
    DECLINED
    PENDING
    CANCELLED
    BLOCKED
}

enum RewardType {
    DIPLOMA
    BADGE
}

enum ProgressStatus {
    COMPLETED
    INPROGRESS
    NOTSTARTED
}

enum ProgressType {
    MODULE
    ACTIVITY
}

' Base class for common user attributes
abstract class User {
    -id: Uuid
    -firstName: String
    -middleName: String
    -lastName: String
    -dateOfBirth: Date
    -email: String
    -password: String
    +UpdateProfile(firstName: String, middleName: String, lastName: String, dateOfBirth: Date, email: String, password: String)
    +UpdateName(firstName: String, middleName: String, lastName: String)
    +UpdateEmail(email: String)
    +UpdatePassword(password: String)
}

class Administration {
    +AddStudent(student: Student)
    +AddTeacher(teacher: Teacher)
    +UpdateStudent(student: Student, updatedStudent: Student)
    +UpdateTeacher(teacher: Teacher, updatedTeacher: Teacher)
}

class Teacher extends User {
    +AddLearningModule(module: LearningModule)
}

class Student extends User {
    +ShowProgress(): Progress
    +ShowRewards(): List<Reward>
}

class LearningModule {
    -id: Uuid
    -name: String
    -description: String
    +AddLearningActivity(activity: LearningActivity)
    +RemoveLearningActivity(activity: LearningActivity)
    +ShowLearningActivities(): List<LearningActivity>
}


class LearningActivity {
    -id: Uuid
    -name: String
    -description: String
    -type: LearningActivityType
    +UpdateActivity(name: String, description: String, type: LearningActivityType)
}



class Progress {
    -learningActivity?: LearningActivity
    -type: ProgressType
    -status: ProgressStatus
    -progressDetails: String
    +ShowDetails(): String
    +UpdateProgress(details: String)
}

class Reward {
    -id: Uuid
    -name: String
    -type: RewardType
    -description: String
    +ShowDetails(): String
}

class Acquaintance {
    +AddFriend(friend: Student)
    +RemoveFriend(friend: Student)
    +SendFriendRequest(friend: Student)
    +RespondToFriendRequest(request: FriendRequest)
    +ShowFriendsByStatus(status: FriendRequestStatus): List<Student>
}

class FriendRequest {
    -sender: Student
    -receiver: Student
    -status: FriendRequestStatus
}



Administration -left-> "n" Student
Administration -right-> "n" Teacher
Administration -down-> "n" LearningModule
LearningModule -right-> "n" LearningActivity
Student -up-> "n" Acquaintance
Teacher -down-> "n" LearningModule : creates/manages >
Student -down-> "n" Progress
Student -down-> "n" Reward
Acquaintance -up-> "n" FriendRequest

@enduml